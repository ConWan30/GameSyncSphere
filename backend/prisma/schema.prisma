// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password_hash     String
  full_name         String?
  total_earnings    Float    @default(0)
  completed_surveys Int      @default(0)
  gaming_platforms  String[] @default([])
  favorite_games    String[] @default([])
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  last_login        DateTime?

  // Relations
  surveys          Survey[]
  survey_responses SurveyResponse[]
  earnings         Earning[]
  parties          PartyMember[]

  @@map("users")
}

model Company {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password_hash  String
  company_type   String
  website        String?
  description    String?
  verified       Boolean  @default(false)
  total_spent    Float    @default(0)
  current_budget Float    @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  survey_requests SurveyRequest[]

  @@map("companies")
}

model Survey {
  id                 String   @id @default(cuid())
  user_id            String
  title              String?
  questions          Json
  game_context       Json?
  estimated_earnings Float    @default(0)
  actual_earnings    Float?
  status             String   @default("active") // active, completed, expired
  created_at         DateTime @default(now())
  completed_at       DateTime?
  expires_at         DateTime?

  // Relations
  user      User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  responses SurveyResponse[]

  @@map("surveys")
}

model SurveyResponse {
  id          String   @id @default(cuid())
  survey_id   String
  user_id     String
  question_id String
  response    Json
  created_at  DateTime @default(now())

  // Relations
  survey Survey @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("survey_responses")
}

model SurveyRequest {
  id                String   @id @default(cuid())
  company_id        String
  title             String
  description       String
  target_audience   Json
  budget            Float
  max_responses     Int
  current_responses Int      @default(0)
  status            String   @default("active") // active, paused, completed
  created_at        DateTime @default(now())
  expires_at        DateTime?

  // Relations
  company Company @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("survey_requests")
}

model Party {
  id          String   @id @default(cuid())
  name        String
  game        String?
  max_members Int      @default(4)
  is_public   Boolean  @default(true)
  status      String   @default("active") // active, in_game, disbanded
  created_at  DateTime @default(now())

  // Relations
  members PartyMember[]

  @@map("parties")
}

model PartyMember {
  id        String   @id @default(cuid())
  party_id  String
  user_id   String
  role      String   @default("member") // leader, member
  joined_at DateTime @default(now())

  // Relations
  party Party @relation(fields: [party_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([party_id, user_id])
  @@map("party_members")
}

model Earning {
  id          String   @id @default(cuid())
  user_id     String
  amount      Float
  source      String   // survey, bonus, referral
  description String?
  created_at  DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("earnings")
}
